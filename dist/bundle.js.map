{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,0BAA0B;AAC1B,mBAAmB;AACnB;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wCAAwC;AAC5E;AACA;AACA,eAAe,YAAY,EAAE,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA,eAAe;AACf;AACA,cAAc;AACd,kBAAkB;AAClB;AACA;AACA;AACA,+CAA+C,eAAe,yCAAyC,eAAe;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG,IAAI,aAAa;AACvC,CAAC;AACD;AACA,oBAAoB,kCAAkC;AACtD;AACA,mBAAmB,OAAO,IAAI,aAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,MAAM,4BAA4B;AAClC;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gBAAgB,YAAY;AAC5E;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,KAAK,IAAI,SAAS,QAAQ,IAAI;AACrD;AACA;AACA,uBAAuB,MAAM,QAAQ,KAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc,iBAAiB;AACjE,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,wBAAwB,8CAA8C;AACtE;AACA,kBAAkB,6CAA6C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA,KAAK;AACL;AACA,6BAA6B,wCAAwC,KAAK,KAAK;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oCAAoC,gCAAgC;AACpE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;UE9RA;UACA;UACA;UACA;UACA","sources":["webpack://cursotypescript/./src/index.ts","webpack://cursotypescript/webpack/before-startup","webpack://cursotypescript/webpack/startup","webpack://cursotypescript/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconsole.log(\"Hola Mundo\");\n/**\n * 1. Tipos de datos\n *\n * string\n * number - entero y decimal\n * boolean\n * null\n * undefinied\n *\n */\nvar nombree = \"Jesulin\"; //Variable global\nlet apellido = \"Barroso\"; //Variable local\nconst PI = 3.1415; //Variable constante\nconsole.log(\"Hola\" + \" Mundo soy \" + nombree + \" \" + apellido);\nconsole.log(nombree, apellido);\nconsole.log(nombree + apellido);\nconsole.log(`Hola  ${nombree}`);\nlet a, b, c;\na = \"texto\";\nb = \"texto2\";\nc = 2;\n//Array de Datos\nlet alumnos1A = [\"Juan\", \"Julio\", \"Jose\"];\nlet alumnos2A = [\"Fran\"];\nlet alumnos3A = [\"Julio\", \"Jose\"];\nlet alumnos = [...alumnos1A, ...alumnos2A, ...alumnos3A];\nconsole.log(`${alumnos}`);\nlet valores = [\"Hola\", 3, \"ee\", false];\n//Objetos\nlet misDatos = {\n    nombre: \"Jose\",\n    apellidos: \"Rodriguez\",\n    edad: 18\n};\nlet configuracion = Object.assign({ versionTS: \"Es6\", versionCodigo: \"1.0\" }, misDatos);\nlet propiedad1 = configuracion.versionCodigo;\nlet propiedad2 = configuracion.versionTS;\nconsole.log(`${propiedad1} ${propiedad2}`);\n//enumeraciones\nvar EstadoTarea;\n(function (EstadoTarea) {\n    EstadoTarea[\"Pendiente\"] = \"P\";\n    EstadoTarea[\"Terminado\"] = \"T\";\n    EstadoTarea[\"Enproceso\"] = \"E\";\n})(EstadoTarea || (EstadoTarea = {}));\nlet estadoPendiente = EstadoTarea.Enproceso;\nconsole.log(`${EstadoTarea.Enproceso}`);\nif (EstadoTarea.Enproceso == \"E\") {\n    console.log(\"Awebo\");\n}\nlet tarea1 = { nombre: \"Tarea1\", prioridad: 2, estado: EstadoTarea.Enproceso };\nlet empleado2;\nempleado2 = { id: 34343, edad: 32, sueldo: 99999, nombre: \"fdfdf\" };\nlet empleado1 = { nombre: \"Josema\", edad: 18, sueldo: 1323423 };\nconsole.log(empleado1.sueldo, empleado2.id);\n//Operador Ternario\n//Condicion ->>   ? verdadero : falso\nconsole.log(tarea1.estado == \"E\" ? `La tarea ${tarea1.nombre} se encuentra en ejecucion` : `La tarea ${tarea1.nombre} aun no se ha empezado`);\n//IF-ELSE\nif (tarea1.estado == \"P\") {\n    //Codigo\n}\nelse if (tarea1.estado == \"E\") {\n    //codigo\n}\nelse {\n    //Codigo\n}\n//SWITCH\nswitch (tarea1.estado) {\n    case \"P\":\n        console.log(\"Tarea en Proceso\");\n        break;\n    case \"E\":\n        console.log(\"Tarea en Ejecucion\");\n        break;\n    default:\n        console.log(\"Otro estado o no tiene estado\");\n        break;\n}\n//TRY CATCH\ntry {\n    let numero1 = 1;\n    console.log(numero1.toString());\n}\ncatch (error) {\n    console.log(\"ERROr\");\n}\n// ** Bucles\nlet listaTareasNuevas = [\n    {\n        nombre: \"Tarea 1\",\n        estado: EstadoTarea.Enproceso,\n        prioridad: 2\n    },\n    {\n        nombre: \"Tarea 2\",\n        estado: EstadoTarea.Pendiente,\n        prioridad: 1\n    },\n    {\n        nombre: \"Tarea 3\",\n        estado: EstadoTarea.Terminado,\n        prioridad: 3\n    }\n];\n//Foreach\nlistaTareasNuevas.forEach((tarea, i) => {\n    console.log(`${i} - ${tarea.nombre}`);\n});\n//For clasico de toa la vida\nfor (let index = 0; index < listaTareasNuevas.length; index++) {\n    const tarea = listaTareasNuevas[index];\n    console.log(`${index} - ${tarea.nombre}`);\n}\n//Bucles While\nwhile (tarea1.estado !== EstadoTarea.Terminado) {\n    if (tarea1.prioridad == 2) {\n        tarea1.estado = EstadoTarea.Terminado;\n        break;\n    }\n    else {\n        tarea1.prioridad++;\n    }\n}\n//Do while\ndo {\n    tarea1.prioridad++;\n    tarea1.estado = EstadoTarea.Terminado;\n} while (tarea1.estado !== EstadoTarea.Terminado);\n// ** Factor Spread\n//En asignacion de variables\nlet { nombre, estado, prioridad } = tarea1;\n//En listas\nlet listaLunes = [\"Leche\", \"Huevos\"];\nlet listaMartes = [\"Harina\", \"Trigo\"];\nlet listaMiercoles = [\"York\", \"Salami\"];\nlet listaSemana = [...listaLunes, ...listaMartes, ...listaMiercoles];\nconsole.log(`${listaSemana}`);\n//En objetos\nlet estadoApp = {\n    user: \"admin\",\n    session: 3,\n    jwt: \"Bearer24242\"\n};\n//Cambiar valor por spread\nlet nuevoEstado = Object.assign(Object.assign({}, estadoApp), { session: 4 });\n// ** Funciones\n//Funcion normal\nfunction saludo(nombre) {\n    console.log(`${nombre}, buenas tardes.`);\n}\nsaludo(\"Jesulin\");\n//Funcion con parametros por defecto\nfunction saludoDefault(nombre = \"Jesulin\") {\n    console.log(`${nombre}, buenas noches.`);\n}\nsaludoDefault();\nsaludoDefault(\"Estefania\");\n//Funcion con parametros opcionales\nfunction saludoOpcional(nombre) {\n    let nombreParam = nombre;\n    if (nombreParam == undefined) {\n        nombreParam = \"Default\";\n    }\n    console.log(`Hola ${nombreParam}, qué tal estas?`);\n}\nsaludoOpcional();\n// Funciones con parámetros de varios tipos\nfunction tiposFunct(tipo) {\n    if (typeof (tipo) == \"string\") {\n        console.log(\"tipo es un string\");\n    }\n    else {\n        console.log(\"tipo es un number\");\n    }\n}\ntiposFunct(\"Ahuevo\");\n// Función con retorno: return\nfunction suma(a, b) {\n    return a + b;\n}\nvar result = suma(1, 2);\nconsole.log(result);\nconsole.log(suma(1, 2));\n//Funcion con varios param\nfunction variosParams(name, surname, age = 18) {\n    if (surname) {\n        console.log(`${name}, ${surname} tiene ${age}`);\n    }\n    else {\n        console.log(`${name} tiene ${age} anios`);\n    }\n}\nvariosParams(\"Martin\");\nvariosParams(\"Martin\", \"Joselito\");\nvariosParams(\"Martin\", undefined, 30);\nvariosParams(\"Martin\", \"Joselito\", 30);\n//Funcion multilples\nfunction multiParam(...nombres) {\n    nombres.forEach((nombre) => {\n        console.log(nombre);\n    });\n}\nmultiParam(\"Emilio\", \"Julian\");\n//Funcion ARROW: forma más breve y clara de escribir funciones en comparación con la sintaxis tradicional, lo que mejora la legibilidad y mantiene la seguridad de los tipos\n//(param1, param2, ..., paramN) => {}\nlet getDatosTarea = (tarea) => {\n    return `La tarea denominada ${tarea.nombre} cuyo estado es ${tarea.estado} \r\n            tiene una prioridad ${tarea.prioridad} `;\n};\nconsole.log(getDatosTarea(tarea1));\n//Funcion CallBack: Función que se pasa a otra función como parámetro y dentro de la misma es llamada. Se trata como objeto.\nconst obtengoSalario = (empleado, cobrar) => {\n    if (empleado.edad > 70) {\n        return;\n    }\n    else {\n        cobrar(); //callback\n    }\n};\nconst cobrarEmpleado = (empleado) => {\n    console.log(`${empleado.nombre} cobra su salario`);\n};\nobtengoSalario(empleado1, () => 'Cobrar Empleado1');\n//Algunas maneras de hacerlo:\n//Ejemplo 1: \nconst funcionMuestra = function () {\n    console.log(\"CallBack desde función estándar\");\n};\n//setTimeout(funcionMuestra,100); // La función timeout llama a funciónMuestra después de 100ms\n// Ejemplo 2: paso de una función anónima\n//setTimeout(function(){console.log(\"CallBack desde función anónima\")},1000);\n// Ejemplo 3: paso de una función flecha\n//setTimeout(()=>{console.log(\"CallBack desde función flecha\")},500);\n//Funcion Callback ejemplo Jose\nlet fsuma = function suma(a, b) {\n    return a + b;\n};\nlet fresta = function resta(a, b) {\n    return a - b;\n};\nfunction opera(x, y, funcion) {\n    return funcion(x, y);\n}\nopera(1, 2, fsuma); //Devuelve la suma de esos numeros\nopera(1, 2, fresta); //Devuelve la resta de esos numeros\n//Funciones asincronas ejemplo Jose\nfunction asincrona() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let suma = 0;\n        for (let i = 0; i < 10000000; i++) {\n            suma += i;\n        }\n        return suma;\n    });\n}\nasincrona().then((data) => { console.log(`El resultado de async es ${data}`); });\nconsole.log(`Linea posterior a la llamada asincrona`);\nfunction getDataUniversity() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const data = yield fetch(\"http://universities.hipolabs.com/search?country=Spain\");\n        let respuesta = yield data.json();\n        return respuesta;\n    });\n}\ngetDataUniversity().then((data) => {\n    data.forEach((universidad) => { console.log(universidad.name); });\n});\nfunction* fgeneradora() {\n    for (let tarea in listaTareasNuevas) {\n        yield listaTareasNuevas[tarea];\n    }\n}\nlet funciongen = fgeneradora();\nconsole.log(funciongen.next());\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/index.ts\"]();\n",""],"names":[],"sourceRoot":""}